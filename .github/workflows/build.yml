name: pawn-bios-extractor

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  BUILD_TYPE: Release

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential ninja-build

      - name: Install Dependencies
        if: matrix.os == 'windows-latest'
        run: |
          choco install -y visualstudio2019buildtools
          choco install -y ninja

      - name: Configure CMake
        run: |
          mkdir build
          cd build
          cmake ..
          cd ..

      - name: Build
        run: |
          cd build
          cmake --build .

      - name: Package
        run: |
          mkdir -p package

          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            cp build/pawn_bios_extractor package/
            tar -czf package/pawn_bios_extractor_linux.tar.gz -C package .
            echo "::set-output name=package::package/pawn_bios_extractor_linux.tar.gz"
          fi

          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            copy build\pawn_bios_extractor.exe package\
            powershell -Command "Compress-Archive -Path package -DestinationPath package\pawn_bios_extractor_windows.zip"
            echo "::set-output name=package::package/pawn_bios_extractor_windows.zip"
          fi

      - name: Test
        if: matrix.os == 'ubuntu-latest'
        run: |
          # Add your Linux-specific testing commands here

      - name: Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: pawn-bios-extractor-artifacts
          path: package

      - name: Deploy
        if: matrix.os == 'ubuntu-latest'
        run: |
          # Add your deployment commands for Linux here

      - name: Deploy
        if: matrix.os == 'windows-latest'
        run: |
          # Add your deployment commands for Windows here
